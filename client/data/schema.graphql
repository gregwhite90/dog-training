type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """The currently logged in user."""
  viewer: User
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String!

  """URL of the profile image of this user."""
  picture: String
  dogs(after: String, first: Int, before: String, last: Int): UserToDogConnection
}

"""A connection to a list of items."""
type UserToDogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserToDogEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserToDogEdge {
  """The item at the end of the edge"""
  node: Dog

  """A cursor for use in pagination"""
  cursor: String!

  """The role the user plays for the dog."""
  user_role: UserDogRole
}

type Dog implements Node {
  """The ID of an object"""
  id: ID!
  users(after: String, first: Int, before: String, last: Int): DogToUserConnection
  name: String!

  """URL of the profile image of this dog."""
  picture: String
}

"""A connection to a list of items."""
type DogToUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DogToUserEdge]
}

"""An edge in a connection."""
type DogToUserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!

  """The role the user plays for the dog."""
  user_role: UserDogRole
}

enum UserDogRole {
  OWNER
  TRAINER
  VIEWER
}

type Mutation {
  """Create a new dog with the currently logged in user as an 'owner'."""
  addDog(input: AddDogInput!): AddDogPayload
  editDog(input: EditDogInput!): EditDogPayload
}

type AddDogPayload {
  dogEdge: UserToDogEdge!
  viewer: User!
  clientMutationId: String
}

input AddDogInput {
  name: String!

  """URL of the profile image of this dog."""
  picture: String
  clientMutationId: String
}

type EditDogPayload {
  dog: Dog!
  clientMutationId: String
}

input EditDogInput {
  id: ID!
  name: String
  picture: String
  clientMutationId: String
}
