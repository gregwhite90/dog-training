type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """The currently logged in user."""
  viewer: User
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  name: String!

  """URL of the profile image of this user."""
  picture: String
  dogs(after: String, first: Int, before: String, last: Int): UserToDogConnection
  pending_invitations_sent(after: String, first: Int, before: String, last: Int): PendingInvitationConnection
  pending_invitations_received(after: String, first: Int, before: String, last: Int): PendingInvitationConnection
  training_sessions(after: String, first: Int, before: String, last: Int): UserToTrainingSessionConnection!
}

"""A connection to a list of items."""
type UserToDogConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserToDogEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type UserToDogEdge {
  """The item at the end of the edge"""
  node: Dog

  """A cursor for use in pagination"""
  cursor: String!

  """The role the user plays for the dog."""
  user_role: UserDogRole
}

type Dog implements Node {
  """The ID of an object"""
  id: ID!
  users(after: String, first: Int, before: String, last: Int): DogToUserConnection
  behaviors(after: String, first: Int, before: String, last: Int): BehaviorConnection
  trainingSessions(after: String, first: Int, before: String, last: Int): TrainingSessionConnection
  name: String!

  """URL of the profile image of this dog."""
  picture: String
}

"""A connection to a list of items."""
type DogToUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DogToUserEdge]
}

"""An edge in a connection."""
type DogToUserEdge {
  """The item at the end of the edge"""
  node: User

  """A cursor for use in pagination"""
  cursor: String!

  """The role the user plays for the dog."""
  user_role: UserDogRole
}

enum UserDogRole {
  OWNER
  TRAINER
  VIEWER
}

"""A connection to a list of items."""
type BehaviorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BehaviorEdge]
}

"""An edge in a connection."""
type BehaviorEdge {
  """The item at the end of the edge"""
  node: Behavior

  """A cursor for use in pagination"""
  cursor: String!
}

type Behavior implements Node {
  """The ID of an object"""
  id: ID!
  dog: Dog
  trainingStages(after: String, first: Int, before: String, last: Int): TrainingStageConnection
  name: String!

  """Explanation of the desired behavior in clear, plain language."""
  explanation: String

  """
  The method of incentivizing used to entice behavior before commands or hand signals are used.
  """
  incentive_method: IncentiveMethod

  """Description of the incentive method used in training."""
  incentive_description: String

  """The verbal command used to cue this behavior."""
  verbal_command: String

  """The hand signal used to cue this behavior."""
  hand_signal: String

  """Description of the shape used in training."""
  has_duration: Boolean!

  """The verbal command used to release this behavior."""
  release_command: String
}

"""A connection to a list of items."""
type TrainingStageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrainingStageEdge]
}

"""An edge in a connection."""
type TrainingStageEdge {
  """The item at the end of the edge"""
  node: TrainingStage

  """A cursor for use in pagination"""
  cursor: String!
}

type TrainingStage implements Node {
  """The ID of an object"""
  id: ID!
  behavior: Behavior

  """The order within the sequence of training stages for this behavior"""
  seq: Int!

  """Whether this stage includes an incentive method"""
  incentive: Boolean!

  """Whether this stage includes a verbal command"""
  verbal: Boolean!

  """Whether this stage includes a hand signal"""
  hand: Boolean!

  """How frequently successful behavior is rewarded."""
  reward_frequency: RewardFrequency
}

enum RewardFrequency {
  CONTINUOUS
  INTERMITTENT
}

enum IncentiveMethod {
  LURE
  SHAPE
}

"""A connection to a list of items."""
type TrainingSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrainingSessionEdge]
}

"""An edge in a connection."""
type TrainingSessionEdge {
  """The item at the end of the edge"""
  node: TrainingSession

  """A cursor for use in pagination"""
  cursor: String!
}

type TrainingSession implements Node {
  """The ID of an object"""
  id: ID!
  dog: Dog
  trainingStages(after: String, first: Int, before: String, last: Int): TrainingSessionToTrainingStageConnection

  """The length of the training session, in minutes"""
  minutes_long: Int

  """When this training session was started"""
  start_timestamp: DateTime!
}

"""A connection to a list of items."""
type TrainingSessionToTrainingStageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TrainingSessionToTrainingStageEdge]
}

"""An edge in a connection."""
type TrainingSessionToTrainingStageEdge {
  """The item at the end of the edge"""
  node: TrainingStage

  """A cursor for use in pagination"""
  cursor: String!

  """
  Order within the sequence of training progresses in this training session
  """
  seq: Int!

  """The number of successful attempts of this training stage"""
  successes: Int

  """The number of total attempts of this training stage"""
  attempts: Int

  """
  A qualitative assessment of the distance between human and dog while training this stage
  """
  distance: QualitativeLevel

  """
  A qualitative assessment of the duration of the behavior attempted while training this stage
  """
  duration: QualitativeLevel

  """
  A qualitative assessment of the amount of distractions for the dog while training this stage
  """
  distractions: QualitativeLevel
}

enum QualitativeLevel {
  LOW
  MEDIUM
  HIGH
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A connection to a list of items."""
type PendingInvitationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PendingInvitationEdge]
}

"""An edge in a connection."""
type PendingInvitationEdge {
  """The item at the end of the edge"""
  node: PendingInvitation

  """A cursor for use in pagination"""
  cursor: String!
}

type PendingInvitation implements Node {
  """The ID of an object"""
  id: ID!
  invitee_email: String!
  invited_by: User!
  user_role: UserDogRole!
  dog: Dog
}

"""A connection to a list of items."""
type UserToTrainingSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserToTrainingSessionEdge]
}

"""An edge in a connection."""
type UserToTrainingSessionEdge {
  """The item at the end of the edge"""
  node: TrainingSession

  """A cursor for use in pagination"""
  cursor: String!

  """The role the user plays for the training session."""
  user_role: UserTrainingSessionRole
}

enum UserTrainingSessionRole {
  MAINTAINER
  PARTICIPANT
}

type Mutation {
  """Create a new dog with the currently logged in user as an 'owner'."""
  createDog(input: CreateDogInput!): CreateDogPayload
  editDog(input: EditDogInput!): EditDogPayload

  """Invite an email address to collaborate training a dog"""
  inviteUserByEmail(input: InviteUserByEmailInput!): InviteUserByEmailPayload

  """Accept an invitation to collaborate training a dog"""
  acceptInvitation(input: AcceptInvitationInput!): AcceptInvitationPayload

  """Create a new desired behavior for the specified dog"""
  createBehavior(input: CreateBehaviorInput!): CreateBehaviorPayload

  """Create the training stages for the specified desired behavior"""
  createTrainingStages(input: CreateTrainingStagesInput!): CreateTrainingStagesPayload

  """Create a training session for the specified dog"""
  createTrainingSession(input: CreateTrainingSessionInput!): CreateTrainingSessionPayload

  """
  Create logs of training progress achieved on the specified training stage in the specified training session
  """
  createTrainingProgresses(input: CreateTrainingProgressesInput!): CreateTrainingProgressesPayload
}

type CreateDogPayload {
  dogEdge: UserToDogEdge!
  viewer: User!
  clientMutationId: String
}

input CreateDogInput {
  name: String!

  """URL of the profile image of this dog."""
  picture: String
  clientMutationId: String
}

type EditDogPayload {
  dog: Dog!
  clientMutationId: String
}

input EditDogInput {
  id: ID!
  name: String
  picture: String
  clientMutationId: String
}

type InviteUserByEmailPayload {
  viewer: User!
  clientMutationId: String
}

input InviteUserByEmailInput {
  """The email address of the user to invite"""
  invitee_email: String!

  """The ID of the dog to invite the user to collaborate to train"""
  dog_id: ID!

  """The role the user plays for the dog."""
  user_role: UserDogRole!

  """The ID of the user inviting the other user to collaborate"""
  invited_by: ID!
  clientMutationId: String
}

type AcceptInvitationPayload {
  dogEdge: UserToDogEdge!
  viewer: User!
  clientMutationId: String
}

input AcceptInvitationInput {
  invitation_id: ID!
  user_id: ID!
  clientMutationId: String
}

type CreateBehaviorPayload {
  behaviorEdge: BehaviorEdge!
  clientMutationId: String
}

input CreateBehaviorInput {
  dog_id: ID!
  name: String!

  """Explanation of the desired behavior in clear, plain language."""
  explanation: String

  """
  The method of incentivizing used to entice behavior before commands or hand signals are used.
  """
  incentive_method: IncentiveMethod

  """Description of the incentive method used in training."""
  incentive_description: String

  """The verbal command used to cue this behavior."""
  verbal_command: String

  """The hand signal used to cue this behavior."""
  hand_signal: String

  """Description of the shape used in training."""
  has_duration: Boolean!

  """The verbal command used to release this behavior."""
  release_command: String
  clientMutationId: String
}

type CreateTrainingStagesPayload {
  trainingStageEdges: [TrainingStageEdge!]!
  clientMutationId: String
}

input CreateTrainingStagesInput {
  behavior_id: ID!
  training_stages: [TrainingStageScalarFields!]!
  clientMutationId: String
}

input TrainingStageScalarFields {
  """The order within the sequence of training stages for this behavior"""
  seq: Int!

  """Whether this stage includes an incentive method"""
  incentive: Boolean!

  """Whether this stage includes a verbal command"""
  verbal: Boolean!

  """Whether this stage includes a hand signal"""
  hand: Boolean!

  """How frequently successful behavior is rewarded."""
  reward_frequency: RewardFrequency
}

type CreateTrainingSessionPayload {
  trainingSessionEdge: TrainingSessionEdge
  clientMutationId: String
}

input CreateTrainingSessionInput {
  user_id: ID!
  dog_id: ID!

  """The length of the training session, in minutes"""
  minutes_long: Int

  """When this training session was started"""
  start_timestamp: DateTime!
  clientMutationId: String
}

type CreateTrainingProgressesPayload {
  trainingStageEdges: [TrainingSessionToTrainingStageEdge!]!
  clientMutationId: String
}

input CreateTrainingProgressesInput {
  training_session_id: ID!
  training_progresses: [TrainingProgress!]!
  clientMutationId: String
}

input TrainingProgress {
  training_stage_id: ID!

  """
  Order within the sequence of training progresses in this training session
  """
  seq: Int!

  """The number of successful attempts of this training stage"""
  successes: Int

  """The number of total attempts of this training stage"""
  attempts: Int

  """
  A qualitative assessment of the distance between human and dog while training this stage
  """
  distance: QualitativeLevel

  """
  A qualitative assessment of the amount of distractions for the dog while training this stage
  """
  distractions: QualitativeLevel

  """
  A qualitative assessment of the duration of the behavior attempted while training this stage
  """
  duration: QualitativeLevel
}
